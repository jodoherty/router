#!/usr/bin/nft -f
# vim:set ts=2 sw=2 et:

destroy table inet filter
table inet filter {
  chain input {
    type filter hook input priority filter
    policy drop

    ct state vmap { established : accept, related : accept, invalid : drop }
    iif lo accept

    iifname "{{ lan_interface }}" tcp dport {22, 80} accept
    iifname "{{ lan_interface }}" udp dport {53, 67, 547} accept
    iifname "{{ wan_interface }}" udp dport 546 accept


    {% if wg_interface is defined -%}
    iifname "{{ wg_interface }}" tcp dport {22, 80} accept
    iifname "{{ wg_interface }}" udp dport {53, 67, 547} accept
    {%- endif %}


    {% if wg_port is defined -%}
    udp dport {{ wg_port }} accept
    {%- endif %}


    ip protocol icmp accept
    meta l4proto ipv6-icmp accept

    iifname "{{ lan_interface }}" udp dport mdns ip6 daddr ff02::fb accept
    iifname "{{ lan_interface }}" udp dport mdns ip daddr 224.0.0.251 accept

    pkttype host limit rate 5/second counter reject with icmpx type admin-prohibited
    counter
  }

  chain forward {
    type filter hook forward priority filter
    policy drop

    ct state vmap { established : accept, related : accept, invalid : drop }

    iifname "{{ lan_interface }}" accept

    {% if wg_interface is defined -%}
    iifname "{{ wg_interface }}" accept
    {%- endif %}

  }

  chain prerouting {
    type nat hook prerouting priority dstnat; policy accept;

{% if forwarded_ports is defined %}
{% for entry in forwarded_ports %}
    tcp dport {{ entry.wan_port }} dnat ip to {{ entry.lan_address }}:{{ entry.lan_port }}
{% endfor %}
{% endif %}

  }

  chain postrouting {
    type nat hook postrouting priority srcnat; policy accept;

    ip saddr {{ address | ansible.utils.ipaddr('network/prefix') }} ip daddr != {{ address | ansible.utils.ipaddr('network/prefix') }} masquerade

    {% if wg_ip4_address is defined -%}
    ip saddr {{ wg_ip4_address | ansible.utils.ipaddr('network/prefix') }} ip daddr != {{ wg_ip4_address | ansible.utils.ipaddr('network/prefix') }} masquerade
    {%- endif %}


    {% if wg_ip6_address is defined -%}
    ip6 saddr {{ wg_ip6_address | ansible.utils.ipaddr('network/prefix') }} ip6 daddr != {{ wg_ip6_address | ansible.utils.ipaddr('network/prefix') }} masquerade
    {%- endif %}

  }
}

